<!DOCTYPE html>
<html>

<head>
  <title>Quizzz - Are you smart enough?</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/dependencies/bootstrap/dist/css/bootstrap.css">
  <link rel="stylesheet" href="/dependencies/bootstrap/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/font-awesome.min.css">
  <link rel="stylesheet" href="/styles/footer.css">
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/solid.css" integrity="sha384-Tv5i09RULyHKMwX0E8wJUqSOaXlyu3SQxORObAI08iUwIalMmN5L6AvlPX2LMoSE" crossorigin="anonymous"/>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/fontawesome.css" integrity="sha384-jLKHWM3JRmfMU0A5x5AkjWkw/EYfGUAGagvnfryNV3F9VqM98XiIH7VBGVoxVSc7" crossorigin="anonymous"/>
  

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
</head>

<body>

  <!-- header -->

  <header>
    <div class="d-flex flex-row justify-content-center">
      <nav
        class="header-container d-flex flex-row justify-content-center align-self-center navbar navbar-expand-md navbar-dark">

        <a class="header-logo" href="/">
          
            <img src="/images/quizzz_logo.jpg" alt="Logo">
            <div class="company">
              Quizzz
            </div>
        </a>

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" style="border: transparent;">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="header-menu nav collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav ml-auto mr-auto ">
            <li class="nav-item"> <a href="#">About</a> </li>
            <li class="nav-item"> <a href="#">Services</a> </li>
            <li style="width: 50px;"></li>
            <li class="nav-item"><button class="btn btn-secondary login-btn secondary-button">Login</button></li>
            <li class="nav-item"> <a href="/user/new">Register</a></li>
          </ul>
        </div>
    </div>
  </header>

  <!-- header end -->

  <%- body %>

  <!--
    <img class="haken-im-garten" src="/images/haken.png" />
    <img class="kreis" src="/images/kreis.png" />
  -->

    <footer class="d-flex flex-row justify-content-center" style="width: 100%;">
      <div class="footer-container d-flex flex-row justify-content-center align-self-center flex-container">
        <div class="flex-column">
          <h1 class="quizzz">Quizzz</h1>
          <h1 class="quizzz-desc py-4">Quizzz - Web Application</h1>
          <div class="d-flex flex-row justify-content-center">
            <a href="#">
              <img src="/images/discord.svg" alt="Discord icon" class="p-2 social-media-icon">
            </a>
            <a href="#">
              <img src="/images/facebook.svg" alt="Facebook icon" class="p-2 social-media-icon">
            </a>
            <a href="#">
              <img src="/images/instagram.svg" alt="Instagram icon" class="p-2 social-media-icon">
            </a>
            <a href="#">
              <img src="/images/twitter.svg" alt="Twitter icon" class="p-2 social-media-icon">
            </a>
          </div>
        </div>
      </div>
    </footer>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/bootstrap/dist/js/bootstrap.js"></script>
    <script src="/dependencies/bootstrap/dist/js/bootstrap.min.js"></script>
    <!--SCRIPTS END-->
</body>

</html>